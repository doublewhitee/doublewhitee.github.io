<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>栈和队列</title>
    <url>/2025/05/14/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p><strong>栈（stack）</strong> 是一种受限的线性表，它具有以下特性：</p>
<ol>
<li>先入后出，后入先出。</li>
<li>除头尾节点之外，每个元素有一个前驱，一个后继。</li>
</ol>
<p><strong>队列（queue）</strong> 是一种<strong>先进先出</strong>的线性表结构，这个特性正好和栈的特性相反。<br>队列只允许在表的前端（front）进行删除操作，后端（rear）进行插入操作。</p>
<span id="more"></span>
<p><img src="/images/data-structure/stack1.jpg" alt="栈" title="栈"><br><img src="/images/data-structure/queue1.png" alt="队列" title="队列"></p>
<h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h1><h2 id="2-1-栈"><a href="#2-1-栈" class="headerlink" title="2.1 栈"></a>2.1 栈</h2><p>栈使用两种基本操作：<strong>推入（压栈，push）<strong>和</strong>弹出（弹栈，pop）</strong>：</p>
<ul>
<li>推入：将资料放入堆栈顶端，堆栈顶端移到新放入的资料。</li>
<li>弹出：将堆栈顶端资料移除，堆栈顶端移到移除后的下一笔资料。<br>针对以上特性，可以使用以下代码封装一个简单的栈结构：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Stack</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []; <span class="comment">// 栈中的属性</span></span><br><span class="line">    <span class="comment">// 相关操作</span></span><br><span class="line">    <span class="comment">// 1. 将元素压入栈</span></span><br><span class="line">    <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 从栈中取出元素</span></span><br><span class="line">    <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 查看栈顶元素</span></span><br><span class="line">    <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 判断栈是否为空</span></span><br><span class="line">    <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 获取栈中元素个数</span></span><br><span class="line">    <span class="title class_">Stack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br></pre></td></tr></table></figure>
<h2 id="2-2-队列"><a href="#2-2-队列" class="headerlink" title="2.2 队列"></a>2.2 队列</h2><p>栈使用两种基本操作：<strong>入队（插入，enqueue）<strong>和</strong>出队（删除，dequeue）</strong>：</p>
<ul>
<li>入队：向队列尾部添加一个或多个新的项。</li>
<li>出队：移除队列头部的项。<br>针对以上特性，可以使用以下代码封装一个简单的队列结构：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Queue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []; <span class="comment">// 队列中的属性</span></span><br><span class="line">    <span class="comment">// 相关操作</span></span><br><span class="line">    <span class="comment">// 1. 将元素加入队列</span></span><br><span class="line">    <span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">enqueue</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 从队列中删除前端元素</span></span><br><span class="line">    <span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dequeue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 查看队列前端元素</span></span><br><span class="line">    <span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">front</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 查看队列是否为空</span></span><br><span class="line">    <span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 查看队列中元素个数</span></span><br><span class="line">    <span class="title class_">Queue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br></pre></td></tr></table></figure>

<h1 id="3-应用"><a href="#3-应用" class="headerlink" title="3. 应用"></a>3. 应用</h1><h2 id="3-1-十进制转二进制"><a href="#3-1-十进制转二进制" class="headerlink" title="3.1 十进制转二进制"></a>3.1 十进制转二进制</h2><p>十进制转二进制通常采用“除2取余，逆序排列”的方式进行计算。因此采用栈的方式可以轻松实现一个进制转换算法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dec2bin</span>(<span class="params">decNumber</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">    <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 获取余数，并且放入栈中</span></span><br><span class="line">        stack.<span class="title function_">push</span>(decNumber % <span class="number">2</span>)</span><br><span class="line">        <span class="comment">// 2. 获取整除后的结果，作为下一次运算的数字</span></span><br><span class="line">        decNumber = <span class="title class_">Math</span>.<span class="title function_">floor</span>(decNumber / <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 从栈中取出0和1</span></span><br><span class="line">    <span class="keyword">let</span> binaryString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span>(!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">        binaryString += stack.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binaryString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-击鼓传花"><a href="#3-2-击鼓传花" class="headerlink" title="3.2 击鼓传花"></a>3.2 击鼓传花</h2><p>问题描述：多人围成一个圈数数（这个数字是提前规定好的一个固定数字），数到某个数时，这个数字对应的参与者自动淘汰，最后剩下的人会获得胜利。请问最后剩下的人在原来的哪一个位置上？</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
